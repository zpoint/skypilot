name: Release Publish

on:
  pull_request:
    types: [closed]
    branches:
      - 'releases/**'

jobs:
  extract-version:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'test_releases/')
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: Extract version from PR base branch
        id: extract_version
        run: |
          BASE_BRANCH="${{ github.base_ref }}"
          VERSION=$(echo "$BASE_BRANCH" | sed 's/releases\///')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version extracted: $VERSION"

  create-release:
    needs: [extract-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push tag
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          git push origin "v${VERSION}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Release v${{ needs.extract-version.outputs.version }}"
          tag_name: "v${{ needs.extract-version.outputs.version }}"
          generate_release_notes: true
          draft: true


  cleanup-branches:
    needs: extract-version
    if: github.event.pull_request.merged == false && startsWith(github.head_ref, 'test_releases/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete branches
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          # Check if test branch exists and delete it
          TEST_BRANCH="test_releases/${VERSION}"
          if git ls-remote --heads origin ${TEST_BRANCH} | grep ${TEST_BRANCH}; then
            echo "Deleting test branch: ${TEST_BRANCH}"
            git push origin --delete ${TEST_BRANCH}
          else
            echo "Test branch ${TEST_BRANCH} does not exist, skipping"
          fi
